{"version":3,"sources":["components/CurrencyInput/CurrencyInput.js","components/Rate/Rate.js","components/Balance/Balance.js","components/ExchangeFab/ExchangeFab.js","components/Exchanger/Exchanger.js","store/actions/currencyExchangeActions.js","containers/CurrencyExchanger/CurrencyExchanger.js","App.js","serviceWorker.js","store/reducers/currencyExchange.js","store/reducers/index.js","index.js"],"names":["CurrencyInput","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleAmountChange","amount","actions","changeAmount","truncate","handleCurrencyChange","currency","changeCurrency","currencyOptions","find","option","state","inherits","createClass","key","value","match","toString","_this2","options","map","react_default","a","createElement","MenuItem","className","Select","onChange","e","target","TextField","type","margin","React","Component","Rate","inputCurrency","symbol","rate","outputCurrency","Balance","ExchangeFab","withStyles","root","background","width","height","color","textTransform","classes","other","objectWithoutProperties","Fab","assign","disabled","Exchanger","apply","arguments","fetchRates","clearInterval","fetchInterval","setInterval","CurrencyInput_CurrencyInput_CurrencyInput","inputAmount","changeInputAmount","changeInputCurrency","Balance_Balance","availableInputAmount","Rate_Rate","currencyRate","outputAmount","changeOutputAmount","changeOutputCurrency","availableOutputAmount","variant","aria-label","onClick","exchange","Number","receiveRates","base","dispatch","fetch","concat","requestRates","then","response","json","error","rates","CurrencyExchanger","connect","_state$currencyExchan","currencyExchange","getState","updateInputCurrency","updateOutputCurrency","_","App","Boolean","window","location","hostname","initialState","loadingRates","pocket","roundValue","Math","round","findMoney","money","combineReducers","length","undefined","action","objectSpread","updatePocket","console","log","process","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.42a9e3ec.chunk.js","sourcesContent":["import React from 'react';\nimport './CurrencyInput.css';\nimport { Select, MenuItem, TextField } from '@material-ui/core';\n\nexport class CurrencyInput extends React.Component {\n  constructor(props) {\n    super(props);\n    const { amount, currency, currencyOptions, actions } = props;\n    this.state = { amount, currency, currencyOptions, actions };\n  }\n\n  handleAmountChange = amount => {\n    this.props.actions.changeAmount(this.truncate(amount));\n  };\n\n  handleCurrencyChange = currency => {\n    this.props.actions.changeCurrency(\n      this.props.currencyOptions.find(option => option.currency === currency),\n    );\n  };\n\n  truncate(value) {\n    const match = value.toString().match(/^\\d+(?:\\.\\d{0,2})?/);\n    return match ? match[0] : '';\n  }\n\n  render() {\n    const options = this.props.currencyOptions.map(option => (\n      <MenuItem key={option.currency} value={option.currency}>\n        {option.currency}\n      </MenuItem>\n    ));\n    return (\n      <div className=\"CurrencyInput\">\n        <Select\n          value={this.props.currency.currency}\n          onChange={e => this.handleCurrencyChange(e.target.value)}\n        >\n          {options}\n        </Select>\n        <TextField\n          type=\"number\"\n          value={this.props.amount}\n          onChange={e => this.handleAmountChange(e.target.value)}\n          margin=\"normal\"\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './Rate.css';\n\nexport function Rate(props) {\n  return (\n    <div className=\"Rate\">\n      <span>1&nbsp;{props.inputCurrency.symbol}&nbsp;=&nbsp;</span>\n      <span className=\"Rate_value\">{props.rate}</span>\n      <span className=\"\">&nbsp;{props.outputCurrency.symbol}</span>\n    </div>\n  );\n}\n","import React from 'react';\nimport './Balance.css';\n\nexport function Balance(props) {\n  return (\n    <span className=\"Balance\">\n      <span>{props.amount}&nbsp;</span>\n      <span>{props.currency.symbol}</span>\n    </span>\n  );\n}\n","import React from 'react';\nimport Fab from '@material-ui/core/Fab';\nimport { withStyles } from '@material-ui/styles';\n\nconst styles = {\n  root: {\n    background: '#d80091',\n    width: '100%',\n    height: '30px',\n    color: 'white',\n    textTransform: 'none',\n  },\n};\n\nconst ExchangeFabRaw = props => {\n  const { classes, color, ...other } = props;\n  return (\n    <Fab\n      color=\"secondary\"\n      className={classes.root}\n      classes={{ disabled: classes.disabled }}\n      {...other}\n    />\n  );\n};\n\nexport const ExchangeFab = withStyles(styles)(ExchangeFabRaw);\n","import React from 'react';\nimport { CurrencyInput } from '../CurrencyInput/CurrencyInput';\nimport './Exchanger.css';\nimport { Rate } from '../Rate/Rate';\nimport { Balance } from '../Balance/Balance';\nimport { ExchangeFab } from '../ExchangeFab/ExchangeFab';\n\nexport class Exchanger extends React.Component {\n  componentDidMount() {\n    this.props.fetchRates(this.props.inputCurrency, this.props.outputCurrency);\n    clearInterval(this.fetchInterval);\n    this.fetchInterval = setInterval(\n      () =>\n        this.props.fetchRates(\n          this.props.inputCurrency,\n          this.props.outputCurrency,\n        ),\n      10000,\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.fetchInterval);\n  }\n\n  render() {\n    return (\n      <div className=\"Exchanger\">\n        <div className=\"Exchanger_top-section\">\n          <CurrencyInput\n            className=\"Exchanger_input\"\n            amount={this.props.inputAmount}\n            currency={this.props.inputCurrency}\n            currencyOptions={this.props.currencyOptions}\n            actions={{\n              changeAmount: this.props.changeInputAmount,\n              changeCurrency: this.props.changeInputCurrency,\n            }}\n          />\n\n          <div className=\"Exchanger_field\">\n            <span className=\"Exchanger_label\">You have</span>\n            <Balance\n              amount={this.props.availableInputAmount}\n              currency={this.props.inputCurrency}\n            />\n          </div>\n        </div>\n        <div className=\"Exchanger_bottom-section\">\n          <div className=\"Exchanger_rate\">\n            <Rate\n              rate={this.props.currencyRate}\n              inputCurrency={this.props.inputCurrency}\n              outputCurrency={this.props.outputCurrency}\n            />\n          </div>\n\n          <CurrencyInput\n            amount={this.props.outputAmount}\n            currency={this.props.outputCurrency}\n            currencyOptions={this.props.currencyOptions}\n            actions={{\n              changeAmount: this.props.changeOutputAmount,\n              changeCurrency: this.props.changeOutputCurrency,\n            }}\n          />\n\n          <div className=\"Exchanger_field\">\n            <span className=\"Exchanger_label\">You have</span>\n            <Balance\n              amount={this.props.availableOutputAmount}\n              currency={this.props.outputCurrency}\n            />\n          </div>\n          <div className=\"Exchanger_submit\">\n            <ExchangeFab\n              variant=\"extended\"\n              aria-label=\"Exchange\"\n              onClick={this.props.exchange}\n              disabled={\n                this.props.availableInputAmount < this.props.inputAmount ||\n                !Number(this.props.inputAmount)\n              }\n            >\n              Exchange\n            </ExchangeFab>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import fetch from 'cross-fetch';\n\nexport const CHANGE_INPUT_AMOUNT = 'CHANGE_INPUT_AMOUNT';\nexport const changeInputAmount = amount => ({\n  type: CHANGE_INPUT_AMOUNT,\n  amount,\n});\n\nexport const UPDATE_INPUT_CURRENCY = 'UPDATE_INPUT_CURRENCY';\nexport const updateInputCurrency = currency => {\n  return (dispatch, getState) => {\n    const { currencyExchange } = getState();\n    dispatch(changeInputCurrency(currency));\n    dispatch(fetchRates(currency, currencyExchange.outputCurrency));\n  };\n};\n\nexport const CHANGE_INPUT_CURRENCY = 'CHANGE_INPUT_CURRENCY';\nexport const changeInputCurrency = currency => ({\n  type: CHANGE_INPUT_CURRENCY,\n  currency,\n});\n\nexport const UPDATE_OUTPUT_CURRENCY = 'UPDATE_OUTPUT_CURRENCY';\nexport const updateOutputCurrency = currency => {\n  return (dispatch, getState) => {\n    const { currencyExchange } = getState();\n    dispatch(changeOutputCurrency(currency));\n    dispatch(fetchRates(currencyExchange.inputCurrency, currency));\n  };\n};\n\nexport const EXCHANGE = 'EXCHANGE';\nexport const exchange = () => ({\n  type: EXCHANGE,\n});\n\nexport const CHANGE_OUTPUT_AMOUNT = 'CHANGE_OUTPUT_AMOUNT';\nexport const changeOutputAmount = amount => ({\n  type: CHANGE_OUTPUT_AMOUNT,\n  amount,\n});\n\nexport const CHANGE_OUTPUT_CURRENCY = 'CHANGE_OUTPUT_CURRENCY';\nexport const changeOutputCurrency = currency => ({\n  type: CHANGE_OUTPUT_CURRENCY,\n  currency,\n});\n\nexport const LOAD_CURRENCY_RATES = 'LOAD_CURRENCY_RATES';\nexport const loadRates = () => ({\n  type: LOAD_CURRENCY_RATES,\n});\n\nexport const RECEIVE_CURRENCY_RATES = 'RECEIVE_CURRENCY_RATES';\nexport const receiveRates = rate => ({\n  type: RECEIVE_CURRENCY_RATES,\n  rate,\n});\n\nexport const ERROR_CURRENCY_RATES = 'ERROR_CURRENCY_RATES';\nexport const errorRates = () => ({\n  type: ERROR_CURRENCY_RATES,\n});\n\nconst requestRates = (base, symbol) =>\n  fetch(\n    `https://api.exchangeratesapi.io/latest?base=${base.currency}&symbols=${symbol.currency}`,\n  );\n\nexport const fetchRates = (base, symbol) => dispatch => {\n  if (base.currency === symbol.currency) {\n    dispatch(receiveRates(1));\n    return;\n  }\n  dispatch(loadRates());\n  requestRates(base, symbol)\n    .then(response => response.json(), error => dispatch(errorRates()))\n    .then(json => dispatch(receiveRates(json.rates[symbol.currency])));\n};\n","import { connect } from 'react-redux';\nimport { Exchanger } from '../../components/Exchanger/Exchanger';\nimport {\n  changeInputAmount,\n  changeOutputAmount,\n  updateInputCurrency,\n  updateOutputCurrency,\n  exchange,\n  fetchRates,\n} from '../../store/actions/currencyExchangeActions';\n\nconst mapStateToProps = state => {\n  const {\n    inputAmount,\n    inputCurrency,\n    outputAmount,\n    outputCurrency,\n    currencyRate,\n    currencyOptions,\n    availableInputAmount,\n    availableOutputAmount,\n  } = state.currencyExchange;\n  return {\n    inputAmount,\n    inputCurrency,\n    outputAmount,\n    outputCurrency,\n    currencyRate,\n    currencyOptions,\n    availableInputAmount,\n    availableOutputAmount,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  changeInputAmount: amount => dispatch(changeInputAmount(amount)),\n  changeInputCurrency: currency => dispatch(updateInputCurrency(currency)),\n  changeOutputAmount: amount => dispatch(changeOutputAmount(amount)),\n  changeOutputCurrency: currency => dispatch(updateOutputCurrency(currency)),\n  exchange: _ => dispatch(exchange()),\n  fetchRates: (inputCurrency, outputCurrency) =>\n    dispatch(fetchRates(inputCurrency, outputCurrency)),\n});\n\nexport const CurrencyExchanger = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Exchanger);\n","import React from 'react';\nimport './App.css';\nimport { CurrencyExchanger } from './containers/CurrencyExchanger/CurrencyExchanger';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <CurrencyExchanger />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_INPUT_AMOUNT,\n  CHANGE_OUTPUT_AMOUNT,\n  CHANGE_OUTPUT_CURRENCY,\n  CHANGE_INPUT_CURRENCY,\n  LOAD_CURRENCY_RATES,\n  RECEIVE_CURRENCY_RATES,\n  ERROR_CURRENCY_RATES,\n  EXCHANGE,\n} from '../actions/currencyExchangeActions';\n\nexport const initialState = {\n  inputAmount: '',\n  inputCurrency: { currency: 'EUR', symbol: '€' },\n  outputAmount: '',\n  outputCurrency: { currency: 'USD', symbol: '$' },\n  currencyOptions: [\n    { currency: 'USD', symbol: '$' },\n    { currency: 'EUR', symbol: '€' },\n    { currency: 'GBP', symbol: '£' },\n  ],\n  currencyRate: 1.13,\n  loadingRates: false,\n  availableInputAmount: 100,\n  availableOutputAmount: 100,\n  pocket: [\n    { currency: 'USD', amount: 100 },\n    { currency: 'EUR', amount: 100 },\n    { currency: 'GBP', amount: 100 },\n  ],\n};\n\nconst roundValue = value => Math.round(value * 100) / 100;\n\nconst findMoney = (pocket, currency) => {\n  const money = pocket.find(money => money.currency === currency.currency);\n  return money ? money.amount : 0;\n};\n\nconst updatePocket = state => {\n  if (\n    state.inputCurrency.currency === state.outputCurrency.currency ||\n    state.availableInputAmount < Number(state.inputAmount) ||\n    !state.inputAmount\n  ) {\n    return state.pocket;\n  }\n  return state.pocket.map(money => {\n    if (money.currency === state.inputCurrency.currency) {\n      return {\n        ...money,\n        amount: roundValue((money.amount -= Number(state.inputAmount))),\n      };\n    }\n    if (money.currency === state.outputCurrency.currency) {\n      return {\n        ...money,\n        amount: roundValue((money.amount += Number(state.outputAmount))),\n      };\n    }\n    return money;\n  });\n};\n\nexport const currencyExchange = (state = initialState, action) => {\n  switch (action.type) {\n    case EXCHANGE:\n      const pocket = updatePocket(state);\n      return {\n        ...state,\n        inputAmount: 0,\n        outputAmount: 0,\n        availableInputAmount: findMoney(pocket, state.inputCurrency),\n        availableOutputAmount: findMoney(pocket, state.outputCurrency),\n        pocket,\n      };\n    case CHANGE_INPUT_AMOUNT:\n      return {\n        ...state,\n        inputAmount: action.amount,\n        outputAmount: roundValue(action.amount * state.currencyRate),\n      };\n    case CHANGE_INPUT_CURRENCY:\n      return {\n        ...state,\n        inputCurrency: action.currency,\n        availableInputAmount: findMoney(state.pocket, action.currency),\n      };\n    case CHANGE_OUTPUT_AMOUNT:\n      return {\n        ...state,\n        inputAmount: roundValue(action.amount / state.currencyRate),\n        outputAmount: action.amount,\n      };\n    case CHANGE_OUTPUT_CURRENCY:\n      return {\n        ...state,\n        outputCurrency: action.currency,\n        availableOutputAmount: findMoney(state.pocket, action.currency),\n      };\n    case LOAD_CURRENCY_RATES:\n      return {\n        ...state,\n        loadingRates: true,\n      };\n    case RECEIVE_CURRENCY_RATES:\n      return {\n        ...state,\n        loadingRates: false,\n        currencyRate: roundValue(action.rate),\n        outputAmount: roundValue(state.inputAmount * action.rate),\n      };\n    case ERROR_CURRENCY_RATES:\n      return {\n        ...state,\n        loadingRates: false,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux'\nimport { currencyExchange } from './currencyExchange'\n\nexport default combineReducers({\n  currencyExchange,\n})\n","import React from 'react';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './store/reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\n\nconsole.log(process.env.NODE_ENV);\n\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n  store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(thunkMiddleware)),\n  );\n}\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}