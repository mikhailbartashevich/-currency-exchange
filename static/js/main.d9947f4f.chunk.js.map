{"version":3,"sources":["components/CurrencyInput/CurrencyInput.js","model/currency.model.js","components/Rate/Rate.js","components/Balance/Balance.js","components/ExchangeFab/ExchangeFab.js","components/SwapIconButton/SwapIconButton.js","components/Exchanger/Exchanger.js","store/actions/currencyExchangeActions.js","containers/CurrencyExchanger/CurrencyExchanger.js","App.js","serviceWorker.js","store/reducers/currencyExchange.js","store/reducers/index.js","index.js"],"names":["CurrencyInput","PropTypes","shape","currency","string","symbol","pure","props","options","currencyOptions","map","option","react_default","a","createElement","MenuItem","key","value","className","Select","input","OutlinedInput","onChange","e","actions","changeCurrency","find","handleCurrencyChange","target","TextField","type","variant","InputProps","startAdornment","InputAdornment","position","amount","changeAmount","match","toString","truncate","handleAmountChange","Rate","inputCurrency","rate","outputCurrency","Balance","ExchangeFab","withStyles","root","background","width","height","color","textTransform","classes","other","Object","objectWithoutProperties","Fab","assign","disabled","SwapIconButton","icon","IconButton","size","Icon","Exchanger","lifecycle","componentDidMount","_this","this","fetchRates","fetchInterval","setInterval","componentWillUnmount","clearInterval","CurrencyInput_CurrencyInput","inputAmount","changeInputAmount","changeInputCurrency","Balance_Balance","availableInputAmount","Rate_Rate","currencyRate","onClick","swapCurrencies","outputAmount","changeOutputAmount","changeOutputCurrency","availableOutputAmount","aria-label","exchange","Number","dispatch","getState","newInputCurrency","currencyExchange","newOutputCurrency","updateAllCurrencies","base","fetch","concat","requestRates","then","response","json","error","rates","CurrencyExchanger","connect","state","_state$currencyExchan","_","App","Boolean","window","location","hostname","initialState","loadingRates","pocket","lastUpdatedAmount","roundValue","round","arguments","length","undefined","Math","findMoney","money","combineReducers","action","objectSpread","updatePocket","String","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d9947f4f.chunk.js","sourcesContent":["import React from 'react';\nimport './CurrencyInput.css';\nimport {\n  Select,\n  MenuItem,\n  TextField,\n  OutlinedInput,\n  InputAdornment,\n} from '@material-ui/core';\nimport { pure } from 'recompose';\nimport PropTypes from 'prop-types';\nimport { CurrencyPropType } from '../../model/currency.model';\n\nconst truncate = value => {\n  const match = value.toString().match(/^\\d+(?:\\.\\d{0,2})?/);\n  return match ? match[0] : '';\n};\n\nconst handleAmountChange = props => amount =>\n  props.actions.changeAmount(truncate(amount));\n\nconst handleCurrencyChange = props => currency =>\n  props.actions.changeCurrency(\n    props.currencyOptions.find(option => option.currency === currency),\n  );\n\nconst CurrencyInputRaw = props => {\n  const currencies = props.currencyOptions || [];\n  const options = currencies.map(option => (\n    <MenuItem key={option.currency} value={option.currency}>\n      {option.currency}\n    </MenuItem>\n  ));\n  return (\n    <div className=\"CurrencyInput\">\n      <Select\n        input={<OutlinedInput />}\n        className=\"CurrencyInput_select\"\n        value={props.currency ? props.currency.currency : ''}\n        onChange={e => handleCurrencyChange(props)(e.target.value)}\n      >\n        {options}\n      </Select>\n      <TextField\n        type=\"number\"\n        variant=\"outlined\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              {props.currency.symbol}\n            </InputAdornment>\n          ),\n        }}\n        value={props.amount}\n        onChange={e => handleAmountChange(props)(e.target.value)}\n      />\n    </div>\n  );\n};\n\nCurrencyInputRaw.propTypes = {\n  actions: PropTypes.shape({\n    changeAmount: PropTypes.func,\n    changeCurrency: PropTypes.func,\n  }),\n  amount: PropTypes.string,\n  currencyOptions: PropTypes.arrayOf(CurrencyPropType),\n  currency: CurrencyPropType,\n};\n\nexport const CurrencyInput = pure(CurrencyInputRaw);\n","import PropTypes from 'prop-types';\n\nexport const CurrencyPropType = PropTypes.shape({\n  currency: PropTypes.string,\n  symbol: PropTypes.string,\n});\n","import React from 'react';\nimport './Rate.css';\nimport { pure } from 'recompose';\nimport { CurrencyPropType } from '../../model/currency.model';\n\nconst RateRaw = props => (\n  <div className=\"Rate\">\n    1 {props.inputCurrency ? props.inputCurrency.symbol : ''} = {props.rate}{' '}\n    {props.outputCurrency ? props.outputCurrency.symbol : ''}\n  </div>\n);\n\nRateRaw.propTypes = {\n  outputCurrency: CurrencyPropType,\n  inputCurrency: CurrencyPropType,\n};\n\nexport const Rate = pure(RateRaw);\n","import React from 'react';\nimport './Balance.css';\nimport { pure } from 'recompose';\nimport PropTypes from 'prop-types';\nimport { CurrencyPropType } from '../../model/currency.model';\n\nexport const BalanceRaw = props => (\n  <span className=\"Balance\">\n    {props.amount} {props.currency ? props.currency.symbol : ''}\n  </span>\n);\n\nBalanceRaw.propTypes = {\n  amount: PropTypes.number,\n  currency: CurrencyPropType,\n};\n\nexport const Balance = pure(BalanceRaw);\n","import React from 'react';\nimport Fab from '@material-ui/core/Fab';\nimport { withStyles } from '@material-ui/styles';\nimport { pure } from 'recompose';\n\nconst styles = {\n  root: {\n    background: '#d80091',\n    width: '100%',\n    height: '30px',\n    color: 'white',\n    textTransform: 'none',\n  },\n};\n\nconst ExchangeFabRaw = props => {\n  const { classes, color, ...other } = props;\n  return (\n    <Fab\n      color=\"secondary\"\n      className={classes.root}\n      classes={{ disabled: classes.disabled }}\n      {...other}\n    />\n  );\n};\n\nexport const ExchangeFab = pure(withStyles(styles)(ExchangeFabRaw));\n","import React from 'react';\nimport { withStyles } from '@material-ui/styles';\nimport { pure } from 'recompose';\nimport { Icon, IconButton } from '@material-ui/core';\n\nconst styles = {\n  icon: {\n    color: '#6d8aff',\n  },\n};\n\nconst SwapIconButtonRaw = props => {\n  const { classes, ...other } = props;\n  return (\n    <IconButton size=\"small\" {...other} className=\"SwapIconButton\">\n      <Icon className={classes.icon}>\n        swap_vert\n      </Icon>\n    </IconButton>\n  );\n};\n\nexport const SwapIconButton = pure(withStyles(styles)(SwapIconButtonRaw));\n","import React from 'react';\nimport './Exchanger.css';\nimport { CurrencyInput } from '../CurrencyInput/CurrencyInput';\nimport { Rate } from '../Rate/Rate';\nimport { Balance } from '../Balance/Balance';\nimport { ExchangeFab } from '../ExchangeFab/ExchangeFab';\nimport { lifecycle, pure } from 'recompose';\nimport PropTypes from 'prop-types';\nimport { CurrencyPropType } from '../../model/currency.model';\nimport { SwapIconButton } from '../SwapIconButton/SwapIconButton';\n\nexport const ExchangerRaw = props => (\n  <div className=\"Exchanger\">\n    <div className=\"Exchanger_top-section\">\n      <CurrencyInput\n        className=\"Exchanger_input\"\n        amount={props.inputAmount}\n        currency={props.inputCurrency}\n        currencyOptions={props.currencyOptions}\n        actions={{\n          changeAmount: props.changeInputAmount,\n          changeCurrency: props.changeInputCurrency,\n        }}\n      />\n\n      <div className=\"Exchanger_balance\">\n        <span className=\"Exchanger_label\">You have</span>\n        <Balance\n          amount={props.availableInputAmount}\n          currency={props.inputCurrency}\n        />\n      </div>\n    </div>\n    <div className=\"Exchanger_bottom-section\">\n      <div className=\"Exchanger_rate\">\n        <Rate\n          rate={props.currencyRate}\n          inputCurrency={props.inputCurrency}\n          outputCurrency={props.outputCurrency}\n        />\n      </div>\n      <SwapIconButton onClick={props.swapCurrencies} />\n\n      <CurrencyInput\n        amount={props.outputAmount}\n        currency={props.outputCurrency}\n        currencyOptions={props.currencyOptions}\n        actions={{\n          changeAmount: props.changeOutputAmount,\n          changeCurrency: props.changeOutputCurrency,\n        }}\n      />\n\n      <div className=\"Exchanger_balance\">\n        <span className=\"Exchanger_label\">You have</span>\n        <Balance\n          amount={props.availableOutputAmount}\n          currency={props.outputCurrency}\n        />\n      </div>\n      <div className=\"Exchanger_submit\">\n        <ExchangeFab\n          variant=\"extended\"\n          aria-label=\"Exchange\"\n          onClick={props.exchange}\n          disabled={\n            props.availableInputAmount < props.inputAmount ||\n            !Number(props.inputAmount)\n          }\n        >\n          Exchange\n        </ExchangeFab>\n      </div>\n    </div>\n  </div>\n);\n\nExchangerRaw.propTypes = {\n  inputAmount: PropTypes.string,\n  inputCurrency: CurrencyPropType,\n  availableInputAmount: PropTypes.number,\n  changeInputAmount: PropTypes.func,\n  changeInputCurrency: PropTypes.func,\n\n  outputAmount: PropTypes.string,\n  outputCurrency: CurrencyPropType,\n  availableOutputAmount: PropTypes.number,\n  changeOutputAmount: PropTypes.func,\n  changeOutputCurrency: PropTypes.func,\n\n  exchange: PropTypes.func,\n  currencyOptions: PropTypes.arrayOf(CurrencyPropType),\n};\n\nexport const Exchanger = pure(\n  lifecycle({\n    componentDidMount() {\n      this.props.fetchRates &&\n        this.props.fetchRates(\n          this.props.inputCurrency,\n          this.props.outputCurrency,\n        );\n      this.fetchInterval = setInterval(\n        () =>\n          this.props.fetchRates(\n            this.props.inputCurrency,\n            this.props.outputCurrency,\n          ),\n        10000,\n      );\n    },\n\n    componentWillUnmount() {\n      clearInterval(this.fetchInterval);\n    },\n  })(ExchangerRaw),\n);\n","export const UPDATE_ALL_CURRENCIES = 'UPDATE_ALL_CURRENCIES';\nexport const updateAllCurrencies = (inputCurrency, outputCurrency) => {\n  return {\n    type: UPDATE_ALL_CURRENCIES,\n    inputCurrency,\n    outputCurrency,\n  };\n};\n\nexport const swapCurrencies = (inputCurrency, outputCurrency) => {\n  return (dispatch, getState) => {\n    const newInputCurrency = inputCurrency || getState().currencyExchange.outputCurrency;\n    const newOutputCurrency = outputCurrency || getState().currencyExchange.inputCurrency;\n    dispatch(updateAllCurrencies(newInputCurrency, newOutputCurrency));\n    return dispatch(fetchRates(newInputCurrency, newOutputCurrency));\n  };\n};\n\nexport const CHANGE_INPUT_AMOUNT = 'CHANGE_INPUT_AMOUNT';\nexport const changeInputAmount = amount => ({\n  type: CHANGE_INPUT_AMOUNT,\n  amount,\n});\n\nexport const UPDATE_INPUT_CURRENCY = 'UPDATE_INPUT_CURRENCY';\nexport const updateInputCurrency = inputCurrency => {\n  return (dispatch, getState) => {\n    const outputCurrency = getState().currencyExchange.outputCurrency;\n    if (inputCurrency.currency === outputCurrency.currency) {\n      return dispatch(\n        swapCurrencies(\n          inputCurrency,\n          getState().currencyExchange.inputCurrency,\n        ),\n      );\n    } else {\n      dispatch(changeInputCurrency(inputCurrency));\n      return dispatch(fetchRates(inputCurrency, outputCurrency));\n    }\n  };\n};\n\nexport const CHANGE_INPUT_CURRENCY = 'CHANGE_INPUT_CURRENCY';\nexport const changeInputCurrency = currency => ({\n  type: CHANGE_INPUT_CURRENCY,\n  currency,\n});\n\nexport const UPDATE_OUTPUT_CURRENCY = 'UPDATE_OUTPUT_CURRENCY';\nexport const updateOutputCurrency = outputCurrency => {\n  return (dispatch, getState) => {\n    const inputCurrency = getState().currencyExchange.inputCurrency;\n    if (inputCurrency.currency === outputCurrency.currency) {\n      return dispatch(\n        swapCurrencies(\n          getState().currencyExchange.outputCurrency,\n          outputCurrency,\n        ),\n      );\n    } else {\n      dispatch(changeOutputCurrency(outputCurrency));\n      return dispatch(fetchRates(inputCurrency, outputCurrency));\n    }\n  };\n};\n\nexport const EXCHANGE = 'EXCHANGE';\nexport const exchange = () => ({\n  type: EXCHANGE,\n});\n\nexport const CHANGE_OUTPUT_AMOUNT = 'CHANGE_OUTPUT_AMOUNT';\nexport const changeOutputAmount = amount => ({\n  type: CHANGE_OUTPUT_AMOUNT,\n  amount,\n});\n\nexport const CHANGE_OUTPUT_CURRENCY = 'CHANGE_OUTPUT_CURRENCY';\nexport const changeOutputCurrency = currency => ({\n  type: CHANGE_OUTPUT_CURRENCY,\n  currency,\n});\n\nexport const LOAD_CURRENCY_RATES = 'LOAD_CURRENCY_RATES';\nexport const loadRates = () => ({\n  type: LOAD_CURRENCY_RATES,\n});\n\nexport const RECEIVE_CURRENCY_RATES = 'RECEIVE_CURRENCY_RATES';\nexport const receiveRates = rate => ({\n  type: RECEIVE_CURRENCY_RATES,\n  rate,\n});\n\nexport const ERROR_CURRENCY_RATES = 'ERROR_CURRENCY_RATES';\nexport const errorRates = () => ({\n  type: ERROR_CURRENCY_RATES,\n});\n\nconst requestRates = (base, symbol) =>\n  fetch(\n    `https://api.exchangeratesapi.io/latest?base=${base.currency}&symbols=${\n      symbol.currency\n    }`,\n  );\n\nexport const fetchRates = (base, symbol) => dispatch => {\n  dispatch(loadRates());\n  return requestRates(base, symbol)\n    .then(response => response.json(), error => dispatch(errorRates()))\n    .then(json => dispatch(receiveRates(json.rates[symbol.currency])));\n};\n","import { connect } from 'react-redux';\nimport { Exchanger } from '../../components/Exchanger/Exchanger';\nimport {\n  changeInputAmount,\n  changeOutputAmount,\n  updateInputCurrency,\n  updateOutputCurrency,\n  exchange,\n  fetchRates,\n  swapCurrencies,\n} from '../../store/actions/currencyExchangeActions';\n\nconst mapStateToProps = state => {\n  const {\n    inputAmount,\n    inputCurrency,\n    outputAmount,\n    outputCurrency,\n    currencyRate,\n    currencyOptions,\n    availableInputAmount,\n    availableOutputAmount,\n  } = state.currencyExchange;\n  return {\n    inputAmount,\n    inputCurrency,\n    outputAmount,\n    outputCurrency,\n    currencyRate,\n    currencyOptions,\n    availableInputAmount,\n    availableOutputAmount,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  changeInputAmount: amount => dispatch(changeInputAmount(amount)),\n  changeInputCurrency: currency => dispatch(updateInputCurrency(currency)),\n  changeOutputAmount: amount => dispatch(changeOutputAmount(amount)),\n  changeOutputCurrency: currency => dispatch(updateOutputCurrency(currency)),\n  exchange: _ => dispatch(exchange()),\n  fetchRates: (inputCurrency, outputCurrency) =>\n    dispatch(fetchRates(inputCurrency, outputCurrency)),\n  swapCurrencies: _ => dispatch(swapCurrencies()),\n});\n\nexport const CurrencyExchanger = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Exchanger);\n","import React from 'react';\nimport './App.css';\nimport { CurrencyExchanger } from './containers/CurrencyExchanger/CurrencyExchanger';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <CurrencyExchanger />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_INPUT_AMOUNT,\n  CHANGE_OUTPUT_AMOUNT,\n  CHANGE_OUTPUT_CURRENCY,\n  CHANGE_INPUT_CURRENCY,\n  LOAD_CURRENCY_RATES,\n  RECEIVE_CURRENCY_RATES,\n  ERROR_CURRENCY_RATES,\n  EXCHANGE,\n  UPDATE_ALL_CURRENCIES,\n} from '../actions/currencyExchangeActions';\n\nexport const initialState = {\n  inputAmount: '0',\n  inputCurrency: { currency: 'EUR', symbol: '€' },\n  outputAmount: '0',\n  outputCurrency: { currency: 'USD', symbol: '$' },\n  currencyOptions: [\n    { currency: 'USD', symbol: '$' },\n    { currency: 'EUR', symbol: '€' },\n    { currency: 'GBP', symbol: '£' },\n  ],\n  currencyRate: 1.13,\n  loadingRates: false,\n  availableInputAmount: 100,\n  availableOutputAmount: 100,\n  pocket: [\n    { currency: 'USD', amount: 100 },\n    { currency: 'EUR', amount: 100 },\n    { currency: 'GBP', amount: 100 },\n  ],\n  lastUpdatedAmount: 'input',\n};\n\nconst roundValue = (value, round = 100) => Math.round(value * round) / round;\n\nconst findMoney = (pocket, currency) => {\n  const money = pocket.find(money => money.currency === currency.currency);\n  return money ? money.amount : 0;\n};\n\nconst updatePocket = state => {\n  if (\n    state.inputCurrency.currency === state.outputCurrency.currency ||\n    state.availableInputAmount < Number(state.inputAmount) ||\n    !state.inputAmount\n  ) {\n    return state.pocket;\n  }\n  return state.pocket.map(money => {\n    if (money.currency === state.inputCurrency.currency) {\n      return {\n        ...money,\n        amount: roundValue((money.amount -= Number(state.inputAmount))),\n      };\n    }\n    if (money.currency === state.outputCurrency.currency) {\n      return {\n        ...money,\n        amount: roundValue((money.amount += Number(state.outputAmount))),\n      };\n    }\n    return money;\n  });\n};\n\nexport const currencyExchange = (state = initialState, action) => {\n  switch (action.type) {\n    case EXCHANGE:\n      const pocket = updatePocket(state);\n      return {\n        ...state,\n        inputAmount: '0',\n        outputAmount: '0',\n        availableInputAmount: findMoney(pocket, state.inputCurrency),\n        availableOutputAmount: findMoney(pocket, state.outputCurrency),\n        pocket,\n      };\n    case CHANGE_INPUT_AMOUNT:\n      return {\n        ...state,\n        inputAmount: String(action.amount),\n        outputAmount: String(roundValue(action.amount * state.currencyRate)),\n        lastUpdatedAmount: 'input',\n      };\n    case CHANGE_INPUT_CURRENCY:\n      return {\n        ...state,\n        inputCurrency: action.currency,\n        availableInputAmount: findMoney(state.pocket, action.currency),\n      };\n    case CHANGE_OUTPUT_AMOUNT:\n      return {\n        ...state,\n        inputAmount: String(roundValue(action.amount / state.currencyRate)),\n        outputAmount: String(action.amount),\n        lastUpdatedAmount: 'output',\n      };\n    case CHANGE_OUTPUT_CURRENCY:\n      return {\n        ...state,\n        outputCurrency: action.currency,\n        availableOutputAmount: findMoney(state.pocket, action.currency),\n      };\n    case UPDATE_ALL_CURRENCIES:\n      return {\n        ...state,\n        outputCurrency: action.outputCurrency,\n        inputCurrency: action.inputCurrency,\n        availableInputAmount: findMoney(state.pocket, action.inputCurrency),\n        availableOutputAmount: findMoney(state.pocket, action.outputCurrency),\n      };\n    case LOAD_CURRENCY_RATES:\n      return {\n        ...state,\n        loadingRates: true,\n      };\n    case RECEIVE_CURRENCY_RATES:\n      return {\n        ...state,\n        loadingRates: false,\n        currencyRate: roundValue(action.rate, 10000),\n        outputAmount:\n          state.lastUpdatedAmount === 'input'\n            ? String(roundValue(state.inputAmount * action.rate))\n            : state.outputAmount,\n        inputAmount:\n          state.lastUpdatedAmount === 'output'\n            ? String(roundValue(state.outputAmount / action.rate))\n            : state.inputAmount,\n      };\n    case ERROR_CURRENCY_RATES:\n      return {\n        ...state,\n        loadingRates: false,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux'\nimport { currencyExchange } from './currencyExchange'\n\nexport default combineReducers({\n  currencyExchange,\n})\n","import React from 'react';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './store/reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\n\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n  store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(thunkMiddleware)),\n  );\n}\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}